@using Microsoft.Extensions.Logging;
@using Microsoft.JSInterop;
@using ThreeNET.Arguments;
@using ThreeNET.Objects.Geometry;
@using ThreeNET.Objects.Meshes.Materials;

@inject ThreeJSInterop Three
@inject IJSRuntime JS
@inject ILogger<ThreeView> Logger
@implements IAsyncDisposable
<h3>ThreeView</h3>
<div @ref=threeElement>
	test
</div>
@code {
	private ThreeCamera Camera { get; set; } = null!;
	private ThreeScene Scene { get; set; } = null!;
	private ThreeWebGLRenderer Renderer { get; set; } = null!;
	private bool Disposed { get; set; }
	private SemaphoreSlim semaphoreSlim = new(1, 1);
	private ElementReference threeElement;
	private DateTime startMoment { get; set; }
	[Parameter]
	public Func<UpdateParameters, Task>? Update { get; set; }
	[Parameter]
	public Func<StartupParameters, Task>? Startup { get; set; }
	[Parameter]
	public Func<ShutdownParameters, Task>? Shutdown { get; set; }

	[Parameter]
	public CameraOptions Options { get; set; }
	[Parameter]
	public Vector2 ViewportSize { get; set; } = new(400, 400);

	public ThreeView()
	{
		Options = CameraOptions.PerspectiveCamera(70, 1, .1, 1000);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Scene = await Three.Create<ThreeScene>();
			Camera = await Options.CreateCamera(Three);
			Renderer = await Three.Create<ThreeWebGLRenderer>();
			await Renderer.SetSize(ViewportSize.X, ViewportSize.Y);
			await Renderer.PlaceInDOM(threeElement);


			var box = await Three.Create<ThreeBoxGeometry>(1, 1, 1);
			await Camera.SetPosition(z: 5);
			lastAnimateTime = DateTime.UtcNow;
			var parameters = new StartupParameters() { };
			await (Startup?.Invoke(parameters)).GetAwaiterOrDefault();

			await Three.RequestAnimationFrame(Animate);
		}
	}

	private DateTime lastAnimateTime;
	public async Task Animate()
	{
		await semaphoreSlim.WaitAsync();
		try
		{
			if (!Disposed)
			{
				await Renderer.Render(Scene, Camera);
				var parameters = new UpdateParameters
					{
						FrameTime = DateTime.UtcNow - lastAnimateTime,
					};
				await Update?.Invoke(parameters).GetAwaiterOrDefault()!;
				lastAnimateTime = DateTime.UtcNow;
				await Three.RequestAnimationFrame(Animate);
			}
		} catch (Exception ex)
		{
			Logger.LogError(ex, null);
		} finally
		{
			semaphoreSlim.Release();
		}
	}

	public async ValueTask DisposeAsync()
	{
		await semaphoreSlim.WaitAsync();
		semaphoreSlim.Dispose();
		try
		{
			var parameters = new ShutdownParameters()
				{
					RunTime = DateTime.Now - startMoment
				};
			await Task.WhenAll(
				(Shutdown?.Invoke(parameters)).GetAwaiterOrDefault(),
				Camera.DisposeOrDefaultAsync().AsTask(),
				Scene.DisposeOrDefaultAsync().AsTask(),
				Scene.DisposeOrDefaultAsync().AsTask());
		} finally
		{
			Disposed = true;
		}
	}
}
